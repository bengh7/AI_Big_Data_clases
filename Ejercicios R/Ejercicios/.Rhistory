edad <- 40
altura <- 1.8
nombre <- Pepe García
nombre <- Pepe Garcia
nombre <- Pepe
nombre <- "Pepe"
x + y
x <- 5
y <- 7
x + y
x - y
x * y
x / y
x^y
x = x+y
x
suma(x+y)
suma<-(x+y)
suma
suma_dos_numeros <- function(a, b) {
return(a + b)
}
suma_dos_numeros <- function(a, b) {
return(a + b)
}
print suma_dos_numeros(3,4)
print (suma_dos_numeros(3,4))
funcion_multiplicar <- function(a, b = 2) {
return(a * b)
}
print(funcion_multiplicar(5))
operaciones_básicas <- function(a,b){
resta <- a - b
multiplicacion <- a * b
return (list(suma, resta, multiplicacion)
}
operaciones_básicas <- function(a,b){
suma <- a + b
resta <- a - b
multiplicacion <- a * b
return (list(suma, resta, multiplicacion))
}
resultado <- operaciones_basicas(10, 3)
print(resultado)
operaciones_basicas <- function(a,b){
suma <- a + b
resta <- a - b
multiplicacion <- a * b
return (list(suma, resta, multiplicacion))
}
resultado <- operaciones_basicas(10, 3)
print(resultado)
numerico <- 7
caracter <- marzo
logico <- True
class(numerico)
clas(caracter)
class(caracter)
caracter <- marzo
numerico <- 7
caracter <- marzo
logico <- True
caracter <- "marzo"
class(caracter)
class(logico)
logico <- TRUE
class(logico)
typeof(numerico)
typeof(caracter)
typeof(logico)
numero <- 7
as.character(numero)
as.logical(numero)
num_integer <- 7L
num_double <- 1.77
num_numeric <- 5
class(num_integer)
class(num_double)
class(num_numeric)
num_double <- 1,77
num_double <- 1.77
class(num_double)
funcion_multiplicar(3)
numero <- 7
b <- as.character(numero)
c <- as.logical(numero)
num_integer <- 7L
num_double <- 1.77
num_numeric <- 5
class(num_integer)
class(num_double)
class(num_numeric)
num_integer <- 7L
num_double <- 1.77
num_numeric <- as.numeric(a)
class(num_integer)
class(num_double)
class(num_numeric)
#crea vectores
numeros <- 1:10
nombres <- c("Ana", "Carlos", "Elena", "Luis", "Marta")
typeof(num_double)
num_numeric <- as.numeric(a)
class(num_integer)
class(num_double)
class(num_numeric)
typeof(num_integer)
typeof(num_double)
typeof(num_numeric)
#crea vectores
numeros <- 1:10
nombres <- c("Ana", "Carlos", "Elena", "Luis", "Marta")
numeros
nombres
nombres <- c("Ana", "Pepe", "Juan", "Luis", "Marta")
numeros
nombres
numeros[3]
numeros[10]
#crea vectores
numeros <- 1:10
nombres <- c("Ana", "Pepe", "Juan", "Luis", "Marta")
numeros
nombres
numeros[3]
numeros[length(numeros)]
#12
numeros[2] <- 15
numeros
vec_num_car <- c(3, "pera", 15, "fresa")
vec_num_car <- c(3, "pera", 15, "fresa")
vec_num_car
class(vec_num_car)
#14
as.numeric("pez")
as.numeric("7")
as.character(754)
as.logical(0)
#16
sort(numeros)
sort(nombres)
#17
sort(nombres)
#18
numeros
index < order(numeros)
#18
index <- order(numeros)
numeros[index]
index
#19
numeros(max())
#19
max(numeros)
min(numeros)
#20
indice_max <- which.max(numeros)
indice_min <- which.min(numeros)
indice_max
indice_min
#21
rank(numeros)
nunmeros1 <- c(2, 2, 4, 4, 6, 7, 9)
rank(numeros1)
numeros1 <- c(2, 2, 4, 4, 6, 7, 9)
rank(numeros1)
#23
vector1 <- c(1, 2, 3, 4, 5)
vector2 <- c(5, 4, 3, 2, 1)
vector1 + vector2
#24
vector1 * 3
vector3 <- c(3, 2, 1)
vector1 + vector3
rank(numeros)
order(numeros)
#27
edades <- c( 18, 25, 33, 46, 53, 65)
#21
rank(numeros)
numeros
#27
edades <- c( 18, 25, 33, 46, 53, 65)
sort(edades)
edades[2]
#27
edades <- c( 18, 25, 33, 46, 53, 65)
sort(edades, decreasing = TRUE)
edades[2]
#27
edades <- c( 18, 25, 33, 46, 53, 65)
edades_ordenadas <- sort(edades, decreasing = TRUE)
edades_ordenadas[2]
#rank(numeros)
#order(numeros)
valores
ordenado <- valores[order(rank(valores))]
#rank(numeros)
#order(numeros)
numeros
ordenado <- numeros[order(rank(numeros))]
ordenado
rank(numeros)
order(numeros)
#28 Suma condicionada
suma_mayores_10 <- sum(numero[numeros>10])
suma_mayores_10
#28 Suma condicionada
suma_mayores_8 <- sum(numero[numeros>8])
suma_mayores_8
#28 Suma condicionada
suma_mayores_8 <- sum(numeros[numeros>8])
suma_mayores_8
#28 Suma condicionada
numeros
suma_mayores_8 <- sum(numeros[numeros>8])
suma_mayores_8
# 29 extraer valores pares
numeros
pares <- numeros[numeros %% 2 == 0]
pares
#30 Creación de una Función Completa
analisis_vector <- function(v){
return(
maximo = max(v),
minimo = min(v),
promedio = mean(v),
ranking = rank(v)
)
}
analisis_vector(numeros)
#30 Creación de una Función Completa
analisis_vector <- function(v){
return(list(
maximo = max(v),
minimo = min(v),
promedio = mean(v),
ranking = rank(v)
)
)
}
analisis_vector(numeros)
edad <- 35
peso <- 75
nombre <- "Pepe"
presion_arterial <- "120/80"
#2
str(list(nombre, edad, peso, presion_arterial))
#3
temps <- c(36.1, 36.8, 37.2, 37.0, 36.9)
means(temps)
#3
temps <- c(36.1, 36.8, 37.2, 37.0, 36.9)
mean(temps)
#4 Clasificación por niveles de glucosa
glucosa <- c(85, 92, 110, 130, 95)
sort(glucosa)
glucosa > 100
#5 Coerción de datos
datos <- c("45", "Juan", TRUE)
class(datos)
#6  Análisis de presión arterial
presiones <- c(120, 14, 135, 150, 125)
max(presiones)
which.max(presiones)
#7
temps <- c(37.5, 36.8, 38.2, 37.0)
rank(temps)
#8
dosis1 <- c(500, 400, 300)
dosis2 <- c(100, 200, 300)
#8
dosis1 <- c(500, 400, 300)
dosis2 <- c(100, 200, 300)
diferencia <- dosis1 - dosis2
diferencia
edades <- c(70, 45, 60, 80)
sort(edades, decreasing =TRUE)
#10
gravedad <- c(3, 5, 2, 4)
order(gravedad, decreasing = TRUE)
imc <- function(peso, talla){
peso / (talla^2)
}
imc (68, 1.65)
pesos <- c(60, 80, 95)
tallas <- c(1.6, 1.75, 1.8)
imcs <- (pesos, tallas)
ifelse(imcs < 18.5, "Bajo peso",
ifelse(imcs < 25, "Normal", "Sobrepeso"))
pesos <- c(60, 80, 95)
tallas <- c(1.6, 1.75, 1.8)
imcs <- imc(pesos, tallas)
ifelse(imcs < 18.5, "Bajo peso",
ifelse(imcs < 25, "Normal", "Sobrepeso"))
#14  Registro diario de ritmo cardíaco
pre <- c(140, 135, 145)
post <- c(130, 128, 138)
diferencia <- pre - post
diferencia
#♦ 15
alerta_fiebre <- function(temp){
temp > 37.5
]
#♦ 15
alerta_fiebre <- function(temp){
temp > 37.5
}
alerta_fiebre(c(36.5, 38.2, 37.0))
#13
rc <- c(72, 80, 76, 78)
sum(rc)
mean(rc)
#♦ 15
presiones <- c(130, 145, 160, 138)
sum(presiones > 140)
#16
alerta_fiebre <- function(temp){
temp > 37.5
}
alerta_fiebre(c(36.5, 38.2, 37.0))
respuestas <- c("si", "no", 1, 0)
class(respuestas)
frecuencia <- c(80, 85, 90, 78)
mean(frecuencia)
max(frecuencia)
min(frecuencia)
valores <- c(200, 250, 180, 220)
val_norm <- (valores - min(valores)) / (max(valores) - min(valores))
val_norm
#20
riesgo <- function(presion, glucosa, colesterol){
0.3 * presion + 0.4 *glucosa +0.3 *colesterol
}
riesgo(140, 110, 180)
#1 Calcula la tasa de homicidios
installed.packages()
install.packages("dplyr")
library(dplyr)
Sys.which("make")
install.packages("devtools")
#1 Calcula la tasa de homicidios
library(dplyr)
sat.seed(123) # semilla para reproducibilidad
library(dplyr)
library(tibble)
sat.seed(123) # semilla para reproducibilidad
n <- 200 #numeros de personas
#crear un tibble
datos <- tibble(
edad_grupo = sample(c("18-30", "31-45", "46-60", "61+"), n , replace =TRUE),
sexo = sample(c("hombre", "mujer"), n, replace = TRUE),
region = sample(c("norte", "centro", "sur"), n, replace = TRUE),
enfermedad = sample(c(0,1), n, replace =TRUE, prob = c(1.7, 0.3)) #30% prevalencia
)
set.seed(123) # semilla para reproducibilidad
n <- 200 #numeros de personas
#crear un tibble
datos <- tibble(
edad_grupo = sample(c("18-30", "31-45", "46-60", "61+"), n , replace =TRUE),
sexo = sample(c("hombre", "mujer"), n, replace = TRUE),
region = sample(c("norte", "centro", "sur"), n, replace = TRUE),
enfermedad = sample(c(0,1), n, replace =TRUE, prob = c(1.7, 0.3)) #30% prevalencia
)
library(dplyr)
library(tibble)
set.seed(123) # semilla para reproducibilidad
n <- 200 #numeros de personas
#crear un tibble
datos <- tibble(
edad_grupo = sample(c("18-30", "31-45", "46-60", "61+"), n , replace =TRUE),
sexo = sample(c("hombre", "mujer"), n, replace = TRUE),
region = sample(c("norte", "centro", "sur"), n, replace = TRUE),
enfermedad = sample(c(0,1), n, replace =TRUE, prob = c(1.7, 0.3)) #30% prevalencia
)
#Exploracion de datos
head(datos) #muestra de las primeras filas
str(datos) #muestra la estructura de datos
#tabla de frecuencia
tabla_enfermedad <- table(datos$enfermedad)
tabla_enfermedad_rel <- prop.table(tabla_enfermedad)
tabla_sexo <- table(datos$sexo, datos$enfermedad)
tabla_sexo_rel <- prop.table(tabla_sexo, margin = 1)#calcula una proporcion y el uno en oreden de fila
# tabla cruzada entre enfermedad y grupo de edad.
tabla_edad <- table(datos$edad_grupo, datos$enfermedad)
#representaciones gráficas
#Diagrama de barras para el grupo etario
barplot(tabla_sexo, beside=TRUE, col = c("lightblue", "salmon"),
legend = c("No Enfermo", Enfermo), main = "Prevalencia por Sexo")
# tabla cruzada entre enfermedad y grupo de edad.
tabla_edad <- table(datos$edad_grupo, datos$enfermedad)
#representaciones gráficas
#Diagrama de barras para el grupo etario
barplot(tabla_sexo, beside=TRUE, col = c("lightblue", "salmon"),
legend = c("No Enfermo", "Enfermo"), main = "Prevalencia por Sexo")
#representaciones gráficas
#Diagrama de barras para el grupo etario
barplot(tabla_sexo, beside=TRUE, col = c("lightblue", "salmon"),
legend = c("No Enfermo", "Enfermo"), main = "Prevalencia por Sexo")
#tabla de frecuencia
tabla_enfermedad <- table(datos$enfermedad)
tabla_enfermedad_rel <- prop.table(tabla_enfermedad)
tabla_sexo <- table(datos$sexo, datos$enfermedad)
tabla_sexo_rel <- prop.table(tabla_sexo, margin = 1)#calcula una proporcion y el uno en oreden de fila
# tabla cruzada entre enfermedad y grupo de edad.
tabla_edad <- table(datos$edad_grupo, datos$enfermedad)
#representaciones gráficas
#Diagrama de barras para el grupo etario
barplot(tabla_sexo, beside=TRUE, col = c("lightblue", "salmon"),
legend = c("No Enfermo", "Enfermo"), main = "Prevalencia por Sexo")
#Diagrama de barras para el grupo etario
barplot(tabla_edad, beside=TRUE, col = c("lightblue", "salmon"),
legend = c("No Enfermo", "Enfermo"), main = "Prevalencia edad")
#Grafico circular de la prevalencia total
pie(tabla_enfermedad, labels = c("No Enfermo", "Enfermo"),
col = c("gray98", "red"), main = "Prevalencia Total")
libray(dslabs)
libray(dslabs)
library(dslabs)
library(dslabs)
murder_rate <- (muerders$total / murders$population) * 100000
#Crear el vector logico que indique si la tasa es menor que 1
low <- murder_rate <1
murder_rate
low
#Crear el vector logico que indique si la tasa es menor que 1
low <- murder_rate < 1
murder_rate <- (muerders$total / murders$population) * 100000
#Crear el vector logico que indique si la tasa es menor que 1
low <- murder_rate < 1
murder_rate
low
library(dslabs)
murder_rate <- (muerders$total / murders$population) * 100000
#Crear el vector logico que indique si la tasa es menor que 1
low <- murder_rate < 1
library(dslabs)
murder_rate <- (murders$total / murders$population) * 100000
#Crear el vector logico que indique si la tasa es menor que 1
low <- murder_rate < 1
murder_rate
library(dslabs)
murder_rate <- (murders$total / murders$population) * 100000
#Crear el vector logico que indique si la tasa es menor que 1
low <- murder_rate < 1
murder_rate
low
#Obtener los indeces de murder_rate donde la tasa es <1
low_indices <- which(low)
low_indices
estados <- murders$state[low_indices]
estados
#4 Definir los testados del noreste
northeast_states <- c("ME", "NH", "VT", "MA", "RI", "CT", "CT", "NY", "NJ", "PA")
northeast_low <- low & (murders$abb %in% northeast_states)
northeast_estados <- murders$state(northeast_low)
northeast_estados
